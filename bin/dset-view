#!/usr/bin/env python2
# encoding: utf-8
"""
dset-view <fname.dset> [index]

Print the contents of the dataset.
"""

from __future__ import division, print_function

__author__ = "Parantapa Bhattachara <pb [at] parantapa [dot] net>"

import sys
from pprint import PrettyPrinter

import pypb.dset

# Make pprint support unicode
# http://stackoverflow.com/questions/10883399/unable-to-encode-decode-pprint-output
class MyPrettyPrinter(PrettyPrinter):
    def format(self, obj, context, maxlevels, level):
        if isinstance(obj, unicode):
            return (obj.encode('utf8'), True, False)
        return PrettyPrinter.format(self, obj, context, maxlevels, level)

_pprint = MyPrettyPrinter(indent=4, depth=5).pprint

def pprint(obj):
    try:
        _pprint(obj)
    except IOError:
        sys.exit(0)

def main():
    if len(sys.argv) == 2:
        fname = sys.argv[1]
        with pypb.dset.open(fname) as dset:
            for item in dset:
                pprint(item)

    elif len(sys.argv) == 3:
        fname = sys.argv[1]
        key = sys.argv[2]

        # Using the multiple index notation
        if "," in key:
            key = key.strip().split(",")
            key = map(int, key)
            with pypb.dset.open(fname) as dset:
                for item in dset.get_idxs(key):
                    pprint(item)

        # Using the slice notation
        elif ":" in key:
            key = key.strip().split(":")
            key = [(int(k) if k.strip() else None) for k in key]
            with pypb.dset.open(fname) as dset:
                for item in dset.get_slice(*key):
                    pprint(item)

        # Using a single index
        else:
            idx = int(key)
            with pypb.dset.open(fname) as dset:
                pprint(dset.get_idx(idx))
    else:
        print(__doc__)
        sys.exit(0)

if __name__ == '__main__':
    main()
